{
    "openapi": "3.0.0",
    "info": {
        "title": "Billink Customer Portal Backend",
        "description": "cp.billink",
        "version": "1.0.0"
    },
    "paths": {
        "/api/actual-app-version/get/{platform}": {
            "get": {
                "tags": [
                    "Actual Mobile App Version"
                ],
                "summary": "Get actual mobile application version by platform (android/ios)",
                "operationId": "get_app_api_actualappversion_getactualappversion",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "platform",
                        "in": "path",
                        "description": "platform name (android/ios)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/actual-app-version/set/{platform}/{version}": {
            "post": {
                "tags": [
                    "Actual Mobile App Version"
                ],
                "summary": "Set actual mobile application version by platform (android/ios)",
                "operationId": "post_app_api_actualappversion_updateactualappversion",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "platform",
                        "in": "path",
                        "description": "platform name (android/ios)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/pincode/access": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "post_app_api_authorization_accesstoken",
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "query",
                        "description": "Rest client Id. Ask back-end team for it.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "client_secret",
                        "in": "query",
                        "description": "Rest client Secret. Ask back-end team for it.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pincode",
                        "in": "query",
                        "description": "User's pincode.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Users email, it must be stored on client application side on email login (first login type)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid and never used token .\n                  For success response code will be 1000. For error situations HTTP code also will be 200 , but ,\n                  response codes are listed in HTTP 400 section . Roles can be either `employee` or `user`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "access_token": {
                                            "type": "string"
                                        },
                                        "expires_in": {
                                            "type": "integer"
                                        },
                                        "token_type": {
                                            "type": "string"
                                        },
                                        "code": {
                                            "description": "Response status code. For success will be 1000, for error will be 4003",
                                            "type": "string"
                                        },
                                        "role": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Returns when request has Authorization header with valid and never used token .\n                  Also some exceptions can supervene , response http code will be 200 ,\n                  but as error code will be used internal codes like :\n                  4000 [ Wrong parameters was sent ] ,\n                  4001 [ Make sure client_id and client_secret are right ] .\n                  Of course ErrorMessages can be different , but error codes will remain this ones",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/authorize": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "summary": "Get application access token.",
                "operationId": "post_app_api_authorization_authorizewithhottoken",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, as value will be the token from email redirect link, without any token types or additional details.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "client_id",
                        "in": "query",
                        "description": "Rest client Id. Ask back-end team for it.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "client_secret",
                        "in": "query",
                        "description": "Rest client Secret. Ask back-end team for it.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "description": "Request origin, it can be either `mobile` or `web` depends where from the request come.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid and never used token .\n                  For success response code will be 1000. For error situations HTTP code also will be 200 , but ,\n                  response codes are listed in HTTP 400 section . Roles can be either `employee` or `user`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "access_token": {
                                            "type": "string"
                                        },
                                        "expires_at": {
                                            "type": "integer"
                                        },
                                        "token_type": {
                                            "type": "string"
                                        },
                                        "code": {
                                            "description": "Response status code. For success will be 2000",
                                            "type": "string"
                                        },
                                        "role": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Returns when request has Authorization header with valid and never used token .\n                  Also some exceptions can supervene , response http code will be 200 ,\n                  but as error code will be used internal codes like :\n                  4004 [ No token found in the system ] ,\n                  4002 [ Token is expired ] ,\n                  4000 [ This token already was used ] ,\n                  4001 [ Make sure client_id and client_secret are right ] .\n                  Of course ErrorMessages can be different , but error codes will remain this ones",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/send-email": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "summary": "Send email with hot token to mailbox given as argument.",
                "operationId": "post_app_api_authorization_sendemailwithhotlink",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, here will be used custom value for this header.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email of user who wants to login on Customer Portal . For success response code will be 1000.\n           For error situations HTTP code also will be 200 , but , response codes are listed in HTTP 400 section .",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "description": "Origin shows where from comes http either mobile application or web browser .\n                  For mobile application origin value will be `mobile` and for web browser client `web`.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when user email exists on billink side. Email will contain a url with 2 GET parameters `email-id` and `origin`. ",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "description": "For success will be 1000.",
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Returns when email was found on billink side .\n              Also some exceptions can supervene , response http code will be 200 , but as error code will be used internal codes like :\n              4001 [ No required headers found ] ,\n              4001 [ User has no access to portal ] ,\n              4004 [ No user was found for given email address ] ,\n              4000 [ Form validation error ]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Will be `fail`.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "summary": "Logout user through revoking the access token",
                "operationId": "post_app_api_authorization_logoutuser",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Access token which should be revoked",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when user email exists on billink side. Email will contain a url with 2 GET parameters `email-id` and `origin`. ",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "description": "For success will be 1000.",
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Returns in error case",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "description": "Will be `fail`.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/banner/get": {
            "get": {
                "tags": [
                    "Banner"
                ],
                "summary": "Get banner info",
                "operationId": "get_app_api_banner_getbanner",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bannerResolution",
                        "in": "query",
                        "description": "Valid values: *xxxhdpi*, *xxhdpi* or *xhdpi*. Default: *xxxhdpi*",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": {
                                        "$ref": "#/components/schemas/BannerResponseModel"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When something went wrong.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/banner/upload": {
            "post": {
                "tags": [
                    "Banner"
                ],
                "summary": "Upload banner image (if banner image already exist, it will replace current one with a new one)",
                "operationId": "post_app_api_banner_upload",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Access token of Billink trunk",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "imageName",
                        "in": "query",
                        "description": "Image name + extension. Example: *banner.jpg*",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "imageCode",
                        "in": "query",
                        "description": "base64 encoded image, max size is 1mb",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "referenceUrl",
                        "in": "query",
                        "description": "Url which banner should be referenced to (page url)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "webView",
                        "in": "query",
                        "description": "Should web_view be turned on/off? true/false, default: false",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "webViewWhitelist",
                        "in": "query",
                        "description": "Add whitelisted domains or patterns. <br><br> Here is an example how should you set this parameter if you want to add 3 fields: <br><br>webViewWhitelist[0] = *string* <br>webViewWhitelist[1] = *string* <br>webViewWhitelist[2] = *string* <br>So, every added value should have its own array number",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "hide",
                        "in": "query",
                        "description": "Should banner be hidden? true/false, default: false",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "addedBy",
                        "in": "query",
                        "description": "Email of a person who uploaded it",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": {
                                        "$ref": "#/components/schemas/BannerResponseModel"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Returns when parameter does not correspond requirements.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/banner/delete": {
            "delete": {
                "tags": [
                    "Banner"
                ],
                "summary": "Delete banner",
                "operationId": "delete_app_api_banner_delete",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Access token of Billink trunk",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success case.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "In fail case.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/billink-order/transaction/info/{transactionUuid}": {
            "get": {
                "tags": [
                    "Billink Order"
                ],
                "summary": "Get transaction data",
                "operationId": "get_app_api_billinkorder_gettransactiondetails",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "transactionUuid",
                        "in": "path",
                        "description": "The value you are getting by scanning qr",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns an array with transaction details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "transaction_info": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TransactionResponseModel"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Returns when customer didnt pass the credit check. The same response as for 200, but parameter error contains message",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "transaction_info": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TransactionResponseModel"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when request is invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/billink-order/transaction/confirm/{transactionUuid}": {
            "post": {
                "tags": [
                    "Billink Order"
                ],
                "summary": "Confirm transaction",
                "operationId": "post_app_api_billinkorder_confirmtransaction",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "transactionUuid",
                        "in": "path",
                        "description": "The value you are getting by scanning qr",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns an array with transaction details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "transaction_info": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TransactionResponseModel"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Returns when request is invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/billink-order/transaction/logs": {
            "get": {
                "tags": [
                    "Billink Order"
                ],
                "summary": "Get QR Unified logs.",
                "operationId": "get_app_api_billinkorder_getcustomerlogs",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order by DESC/ASC. Valid parameters: desc|asc.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sort by columns. Valid parameters: id|name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number. Default value is 1",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Limit of returned records per request. Default limit is 20",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "Target customer id",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "transactionUuid",
                        "in": "query",
                        "description": "Find by transaction uuid",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Find by status",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/black/ip": {
            "get": {
                "tags": [
                    "Black IP"
                ],
                "summary": "[admin role] Get the list of ip prefixes.",
                "operationId": "get_app_api_blackip_listblackipprefix",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . The HTTP status code is 200.\n The inner status code could be :\n 1000 [ success ] ,\n 4000 [ validation errors ] ,\n 5000 [ add template procedure failed ]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "description": "The list of block IP entries",
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "prefix": {
                                                        "type": "string"
                                                    },
                                                    "active_until": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Black IP"
                ],
                "summary": "[admin role] Create block ip entry.",
                "operationId": "post_app_api_blackip_createblackipprefix",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "prefix",
                        "in": "query",
                        "description": "IP prefix. e.g. [172.72, 19, 171.83.0.5]",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "active_until",
                        "in": "query",
                        "description": "Active until. The date and time until the prefix is valid for filtering. Should be used the format is 'Y-m-d H:i:s'. e.g. '2021-03-10 06:55:04'",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . The HTTP status code is 200.\n The inner status code could be :\n 1000 [ success ] ,\n 4000 [ validation errors ] ,\n 5000 [ add template procedure failed ]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "description": "The id of newly created block IP entry",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/black/ip/{id}": {
            "post": {
                "tags": [
                    "Black IP"
                ],
                "summary": "[admin role] Update block ip entry.",
                "operationId": "post_app_api_blackip_updateblackipprefix",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "prefix",
                        "in": "query",
                        "description": "IP prefix. e.g. [172.72, 19, 171.83.0.5]",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "active_until",
                        "in": "query",
                        "description": "Active until. The date and time until the prefix is valid for filtering. Should be used the format is 'Y-m-d H:i:s'. e.g. '2021-03-10 06:55:04'",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . The HTTP status code is 200.\n The inner status code could be :\n 1000 [ success ] ,\n 4000 [ validation errors ] ,\n 5000 [ add template procedure failed ]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "description": "the code of the updated black ip entry",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/customer-data/details": {
            "get": {
                "tags": [
                    "Customer data"
                ],
                "summary": "Get customer data by user id.",
                "operationId": "get_app_api_customerdata_getcustomerdata",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/customer-data/add": {
            "post": {
                "tags": [
                    "Customer data"
                ],
                "summary": "Add customer data",
                "operationId": "post_app_api_customerdata_addcustomerdata",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "initials",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lastNamePrefix",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lastName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "gender",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateOfBirth",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "street",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "houseNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "houseNumberSuffix",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postalCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "city",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "country",
                        "in": "query",
                        "description": "Customer country code (NL, BE...etc)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "phoneNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partnerLastNamePrefix",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preferredLastNamePrefix",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partnerLastName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preferredLastName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressExtra",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/customer-data/edit": {
            "patch": {
                "tags": [
                    "Customer data"
                ],
                "summary": "Edit customer data",
                "operationId": "patch_app_api_customerdata_editcustomerdata",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email address",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "initials",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lastNamePrefix",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lastName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "gender",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateOfBirth",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "street",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "houseNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "houseNumberSuffix",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postalCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "city",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "country",
                        "in": "query",
                        "description": "Customer country code (NL, BE...etc)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "phoneNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partnerLastNamePrefix",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preferredLastNamePrefix",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partnerLastName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "preferredLastName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressExtra",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/customer-data/delete": {
            "delete": {
                "tags": [
                    "Customer data"
                ],
                "summary": "Delete customer data",
                "operationId": "delete_app_api_customerdata_deletecustomerdata",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/customer-data/search": {
            "post": {
                "tags": [
                    "Customer data"
                ],
                "summary": "Search customer data",
                "operationId": "post_app_api_customerdata_search",
                "parameters": [
                    {
                        "name": "body{}",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "lastname": {
                                            "type": "string"
                                        },
                                        "email": {
                                            "type": "string"
                                        },
                                        "postalcode": {
                                            "type": "string"
                                        },
                                        "phonenumber": {
                                            "type": "string"
                                        },
                                        "housenumber": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The array of found ids",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "matching{}": {
                                            "description": "the keys are the combinatations used for matching. the values are the arrays of matching ids",
                                            "properties": {
                                                "email": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "ids[]": {
                                            "description": "all the mathing ids crammed in one place",
                                            "type": "array",
                                            "items": {
                                                "type": "integer"
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": "{\n                                 matching: {\n                                    email: [ 67 ] ,\n                                    lastname +phonenumber: [ 100 , 101 ]\n                                 },\n                                 ids : [ 67 , 100 , 101 ]\n                               }"
                            }
                        }
                    }
                }
            }
        },
        "/api/dispute/products/{invoice}": {
            "get": {
                "tags": [
                    "Dispute"
                ],
                "summary": "Endpoint which returns list of returnable products by order id.",
                "operationId": "get_app_api_dispute_getreturnableproducts",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoice",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/dispute/products/return/{invoice}": {
            "post": {
                "tags": [
                    "Dispute"
                ],
                "summary": "Endpoint which creates the dispute group and dispute for product return reason",
                "operationId": "post_app_api_dispute_returnproducts",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ids_quantities",
                        "in": "query",
                        "description": "List of colon separated product ids and quantities needs to be returned. Example pattern: {productId}:{quantity}",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customCategory",
                        "in": "query",
                        "description": "Field for custom category",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customMessage",
                        "in": "query",
                        "description": "Field for custom message",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customEmail",
                        "in": "query",
                        "description": "Field for custom email",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customPhone",
                        "in": "query",
                        "description": "Field for custom phone number",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fileName",
                        "in": "query",
                        "description": "Field for filename (required with file parameter)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "file",
                        "in": "query",
                        "description": "Field for file (required with fileName parameter)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoice",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/dispute/group/list": {
            "get": {
                "tags": [
                    "Dispute"
                ],
                "summary": "Endpoint which returns a list of dispute groups",
                "operationId": "get_app_api_dispute_getgroups",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Pagination 'perPage' value. Set this parameter, if you want to override the default system value, defined in .env",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Pagination 'page' value",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "invoice",
                        "in": "query",
                        "description": "Invoice number.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Customer email address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when Authorization header are set."
                    },
                    "400": {
                        "description": "Returns when Authorization header is not send also when no invoice found by provided id."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/dispute/group/details": {
            "get": {
                "tags": [
                    "Dispute"
                ],
                "summary": "Endpoint which returns the details of dispute group",
                "operationId": "get_app_api_dispute_getgroupdetails",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoice",
                        "in": "query",
                        "description": "Invoice number.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Customer email address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupId",
                        "in": "query",
                        "description": "Dispute group id",
                        "required": true,
                        "schema": {
                            "type": "int"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when Authorization header are set."
                    },
                    "400": {
                        "description": "Returns when Authorization header is not send also when no invoice found by provided id."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/dispute/details": {
            "get": {
                "tags": [
                    "Dispute"
                ],
                "summary": "Endpoint which returns the details of dispute",
                "operationId": "get_app_api_dispute_getdisputedetails",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoice",
                        "in": "query",
                        "description": "Invoice number.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Customer email address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "disputeId",
                        "in": "query",
                        "description": "Dispute group id",
                        "required": true,
                        "schema": {
                            "type": "int"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when Authorization header are set."
                    },
                    "400": {
                        "description": "Returns when Authorization header is not send also when no invoice found by provided id."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/dispute/message": {
            "post": {
                "tags": [
                    "Dispute"
                ],
                "summary": "Endpoint which adds dispute message",
                "operationId": "post_app_api_dispute_addmessage",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoice",
                        "in": "query",
                        "description": "Invoice number.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Customer email address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "disputeId",
                        "in": "query",
                        "description": "Dispute group id",
                        "required": true,
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "message",
                        "in": "query",
                        "description": "Dispute message",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Content type (required to set closing if content comes with resolving a dispute)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fileName",
                        "in": "query",
                        "description": "The full name of sending file, name and extension.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "file",
                        "in": "query",
                        "description": "base64encoded file content. If you set this parameter, is mandatory to set fileName field with proper data.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when Authorization header are set."
                    },
                    "400": {
                        "description": "Returns when Authorization header is not send also when no invoice found by provided id."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/dispute/resolve": {
            "post": {
                "tags": [
                    "Dispute"
                ],
                "summary": "Endpoint which resolves the dispute",
                "operationId": "post_app_api_dispute_resolve",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoice",
                        "in": "query",
                        "description": "Invoice number.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Customer email address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "disputeId",
                        "in": "query",
                        "description": "Dispute group id",
                        "required": true,
                        "schema": {
                            "type": "int"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when Authorization header are set."
                    },
                    "400": {
                        "description": "Returns when Authorization header is not send also when no invoice found by provided id."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/faq/entity/all": {
            "get": {
                "tags": [
                    "FAQ"
                ],
                "summary": "Get all Frequently Asked Questions",
                "operationId": "get_app_api_faq_index",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .As `code` success status will be 1000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "faq": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FAQResponseModel"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/faq/entity/new": {
            "post": {
                "tags": [
                    "FAQ"
                ],
                "summary": "Create new FAQ element",
                "operationId": "post_app_api_faq_new",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "topic",
                        "in": "query",
                        "description": "FAQ topic. That part which will represent problem.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n Success status code will be 1000 , ValidationError code will be 4000.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "faq": {
                                            "$ref": "#/components/schemas/FAQResponseModel"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/faq/content/{id}": {
            "post": {
                "tags": [
                    "FAQ"
                ],
                "summary": "Add FAQ content messages (this will be kind of response messages).",
                "operationId": "post_app_api_faq_newcontent",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "content",
                        "in": "query",
                        "description": "FAQ solutions and advises.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n Success status code will be 1000 , ValidationError code will be 4000.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "content": {
                                            "$ref": "#/components/schemas/FAQContentResponseModel"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no FAQ was found with such an id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "integer"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    },
                                                    "exception": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "FAQ"
                ],
                "summary": "Remove FAQ content by content id.",
                "operationId": "delete_app_api_faq_deletecontent",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The id of the FAQ content to remove.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n Success status code will be 1000.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no FAQ Content was found with such an id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "integer"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    },
                                                    "exception": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/faq/entity/{id}": {
            "get": {
                "tags": [
                    "FAQ"
                ],
                "summary": "Get specific FAQ by id.",
                "operationId": "get_app_api_faq_show",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the FAQ to show.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": {
                            "$ref": "#/components/schemas/FAQResponseModel"
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no FAQ was found with such an id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "integer"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    },
                                                    "exception": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "FAQ"
                ],
                "summary": "Remove FAQ by id.",
                "operationId": "delete_app_api_faq_delete",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The id of the FAQ to remove.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n Success status code will be 1000.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no FAQ was found with such an id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "integer"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    },
                                                    "exception": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/faq/entity/update/{id}": {
            "post": {
                "tags": [
                    "FAQ"
                ],
                "summary": "Update specific FAQ topic by id, id will be sent through url",
                "operationId": "post_app_api_faq_edit",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the updated FAQ.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "topic",
                        "in": "query",
                        "description": "FAQ topic. That part which will represent problem.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n Success status code will be 1000 , ValidationError code will be 4000.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no FAQ was found with such an id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "integer"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    },
                                                    "exception": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/faq/content-update/{id}": {
            "post": {
                "tags": [
                    "FAQ"
                ],
                "summary": "Update specific FAQ content by id, id will be sent through url",
                "operationId": "post_app_api_faq_editcontent",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the updated FAQ.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "content",
                        "in": "query",
                        "description": "FAQ content. That part which will describe problem solution. No codes will be shown here",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n Success status code will be 1000 , ValidationError code will be 4000.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no FAQ Content was found with such an id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "integer"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    },
                                                    "exception": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/faq/group/all": {
            "get": {
                "tags": [
                    "FAQGroup"
                ],
                "operationId": "get_app_api_faqgroup_index",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n As `code` success status will be 1000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": {
                                        "schema": "FAQGroupController",
                                        "properties": {
                                            "code": {
                                                "type": "string"
                                            },
                                            "groups": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/FAQGroupResponseModel"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/faq/group/new": {
            "post": {
                "tags": [
                    "FAQGroup"
                ],
                "operationId": "post_app_api_faqgroup_new",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "Name of the group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Group description, if someone want to add it",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n As `code` success status will be 1000 , validation error code will be 4000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "group": {
                                            "$ref": "#/components/schemas/FAQGroupResponseModel"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/faq/group/show/{id}": {
            "get": {
                "tags": [
                    "FAQGroup"
                ],
                "operationId": "get_app_api_faqgroup_show",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the faq group to show.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n As `code` success status will be 1000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FAQGroupResponseModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no FAQ Group was found with such an id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "integer"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    },
                                                    "exception": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/faq/group/{id}/edit": {
            "post": {
                "tags": [
                    "FAQGroup"
                ],
                "operationId": "post_app_api_faqgroup_edit",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Group description, if someone want to add it",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n As `code` success status will be 1000 , validation error code will be 4000.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no FAQ Group was found with such an id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "integer"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    },
                                                    "exception": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/faq/group/{id}": {
            "delete": {
                "tags": [
                    "FAQGroup"
                ],
                "operationId": "delete_app_api_faqgroup_delete",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the faq group to delete.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n As `code` success status will be 1000.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no FAQ Group was found with such an id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "integer"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    },
                                                    "exception": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/faq/group/map/{group}/entity/{entity}": {
            "post": {
                "tags": [
                    "FAQGroup"
                ],
                "operationId": "post_app_api_faqgroup_mapgroupwithentity",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "group",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entity",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n As `code` success status will be 1000 , validation error code will be 4000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/faq/group/sorted": {
            "get": {
                "tags": [
                    "FAQGroup"
                ],
                "operationId": "get_app_api_faqgroup_getgroupsorted",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token. As `code` success status will be 1000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "groups": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FAQSortedResponseModel"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/faq/group/invoice-related/{invoiceNr}": {
            "get": {
                "tags": [
                    "FAQGroup"
                ],
                "operationId": "get_app_api_faqgroup_getgroupbyinvoicenumber",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoiceNr",
                        "in": "path",
                        "description": "Invoice number, faq group for which is needed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . As `code` success status will be 1000 ,\n                  in case Order was not found by given number , code will be 5000.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "groups": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FAQSortedResponseModel"
                                            }
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/ready": {
            "get": {
                "tags": [
                    "Helpers"
                ],
                "operationId": "get_app_api_healthcheck_readycheck",
                "responses": {
                    "200": {
                        "description": "Returns when application services are ready to be used..",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "alive": {
                                            "description": "Just a straightforward data.",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/health": {
            "get": {
                "tags": [
                    "Helpers"
                ],
                "operationId": "get_app_api_healthcheck_healthcheck",
                "responses": {
                    "200": {
                        "description": "Returns when application services are ready to be used, also connection to database is established.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "alive": {
                                            "description": "1 - everything is Ok, 0 - health check failed",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Connection to database is established, but table 'client' has no records in it",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "alive": {
                                            "description": "1 - everything is Ok, 0 - health check failed",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Returns in case of catched exception. Most likely it is something wrong with database.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "alive": {
                                            "description": "1 - everything is Ok, 0 - health check failed",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/id-validation/country/list": {
            "get": {
                "tags": [
                    "Id validation"
                ],
                "summary": "Get countries list. This endpoint is a single endpoint from this controller which using different token.",
                "operationId": "get_app_api_idvalidation_getcountrieslist",
                "parameters": [
                    {
                        "name": "idValidationToken",
                        "in": "query",
                        "description": "Analog of access token but only for id validation system",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                }
            }
        },
        "/api/id-validation/provider/list": {
            "get": {
                "tags": [
                    "Id validation"
                ],
                "summary": "Get providers list",
                "operationId": "get_app_api_idvalidation_getproviderlist",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/id-validation/country/add": {
            "post": {
                "tags": [
                    "Id validation"
                ],
                "summary": "Add country",
                "operationId": "post_app_api_idvalidation_createcountry",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "country code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "description": "default true",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "validationProvider",
                        "in": "query",
                        "description": "validationProvider id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/id-validation/provider/add": {
            "post": {
                "tags": [
                    "Id validation"
                ],
                "summary": "Add provider",
                "operationId": "post_app_api_idvalidation_createprovider",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "logo_name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "logo_code",
                        "in": "query",
                        "description": "base_64 encoded image",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/id-validation/country/edit/{idValidationCountry}": {
            "patch": {
                "tags": [
                    "Id validation"
                ],
                "summary": "Edit country",
                "operationId": "patch_app_api_idvalidation_editcountry",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "idValidationCountry",
                        "in": "path",
                        "description": "record id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "country code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "description": "default true",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "validationProvider",
                        "in": "query",
                        "description": "validationProvider id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/id-validation/provider/edit/{provider}": {
            "patch": {
                "tags": [
                    "Id validation"
                ],
                "summary": "Edit provider",
                "operationId": "patch_app_api_idvalidation_editprovider",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "provider",
                        "in": "path",
                        "description": "record id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "logo_name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "logo_code",
                        "in": "query",
                        "description": "base_64 encoded image",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/id-validation/country/delete/{idValidationCountry}": {
            "delete": {
                "tags": [
                    "Id validation"
                ],
                "summary": "Delete country",
                "operationId": "delete_app_api_idvalidation_deletecountry",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "idValidationCountry",
                        "in": "path",
                        "description": "record id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/id-validation/provider/delete/{provider}": {
            "delete": {
                "tags": [
                    "Id validation"
                ],
                "summary": "Delete provider",
                "operationId": "delete_app_api_idvalidation_deleteprovider",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "provider",
                        "in": "path",
                        "description": "record id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/id-validation/customer/list": {
            "get": {
                "tags": [
                    "Id validation"
                ],
                "summary": "Get a list of id verified customers.",
                "operationId": "get_app_api_idvalidation_getidverifiedcustomerlist",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "query",
                        "description": "Analog of access token but it will be set as an environment variable",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order by DESC/ASC. Valid parameters: desc|asc.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sort by columns. Valid parameters: 'id','createdAt','updatedAt','customer','name','lastName','city','country'",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number. Default value is 1",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Limit of returned records per page. Default limit is 10",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "customer",
                        "in": "query",
                        "description": "User id of verified customer",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "email of verified customer",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lastName",
                        "in": "query",
                        "description": "last name of verified customer",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateOfBirth",
                        "in": "query",
                        "description": "birthdate of verified customer",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "gender",
                        "in": "query",
                        "description": "gender of verified customer",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "street",
                        "in": "query",
                        "description": "street address of verified customer",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "houseNumber",
                        "in": "query",
                        "description": "houseNumber of verified customer",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "houseNumberSuffix",
                        "in": "query",
                        "description": "houseNumberSuffix of verified customer",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "postalCode",
                        "in": "query",
                        "description": "postalCode of verified customer",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "city",
                        "in": "query",
                        "description": "city of verified customer",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "country",
                        "in": "query",
                        "description": "country of verified customer",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "phoneNumber",
                        "in": "query",
                        "description": "phoneNumber of verified customer",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "providerName",
                        "in": "query",
                        "description": "provider which verified customer: itsme or idin",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                }
            }
        },
        "/api/id-validation/gateway/banks/{country}": {
            "get": {
                "tags": [
                    "Id validation gateway"
                ],
                "summary": "Id validation gateway. Get banks list",
                "operationId": "get_app_api_idvalidationgateway_getbankslistforselectedgateway",
                "parameters": [
                    {
                        "name": "idValidationToken",
                        "in": "query",
                        "description": "Analog of access token but only for id validation system",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "country",
                        "in": "path",
                        "description": "country id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                }
            }
        },
        "/api/id-validation/gateway/authenticate/{country}": {
            "post": {
                "tags": [
                    "Id validation gateway"
                ],
                "summary": "Redirect user to provider authentication url",
                "operationId": "post_app_api_idvalidationgateway_getproviderauthenticationlink",
                "parameters": [
                    {
                        "name": "idValidationToken",
                        "in": "query",
                        "description": "Analog of access token but only for id validation system",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "country",
                        "in": "path",
                        "description": "country id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "entrance_code",
                        "in": "query",
                        "description": "the code should be taken from the banks request. In case of provider = Idin",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "return_url",
                        "in": null,
                        "description": "In case of provider = Idin . Customer will be redirected to this url after verification .\n     `WARNING! Please specify ? idValidationToken = parameter ( from /verify-code endpoint response ) at the end of your url `",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issuer_id",
                        "in": "query",
                        "description": "In case of provider = Idin. The id of the bank(issuer) the client want to authenticate to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response containing the idin authentication url",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "idin_authentication_url": {
                                            "description": "Thie iDin authentication url the user should use of",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": {
                            "schema": "IdValidationGatewayController",
                            "properties": {
                                "error": {
                                    "type": "string"
                                },
                                "error_description": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/id-validation/gateway/finish/{country}": {
            "post": {
                "tags": [
                    "Id validation gateway"
                ],
                "summary": "Last step of customer verification",
                "operationId": "post_app_api_idvalidationgateway_finishverification",
                "parameters": [
                    {
                        "name": "idValidationToken",
                        "in": "query",
                        "description": "Analog of access token but only for id validation system",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "country",
                        "in": "path",
                        "description": "country id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "entrance_code",
                        "in": "query",
                        "description": "in case of Idin",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "transaction_id",
                        "in": "query",
                        "description": "in case of Idin",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "idin_authentication_url": {
                                            "description": "Thie iDin authentication url the user should use of",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Wrong data provided. code=400",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/id-validation/gateway/mobile/response": {
            "get": {
                "tags": [
                    "Id validation gateway"
                ],
                "summary": "The main goal of this endpoint is to redirect mobile user to finishVerification url with replaced protocol.",
                "description": "This endpoint will work only with mobile applications. In other cases it's useless",
                "operationId": "get_app_api_idvalidationgateway_mobileverificationgateway",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id_validation",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "country_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "bank_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "301": {
                        "description": "Success case"
                    },
                    "400": {
                        "description": "Wrong data provided. code=400"
                    }
                }
            }
        },
        "/api/idin/banks": {
            "get": {
                "tags": [
                    "iDin"
                ],
                "summary": "Get the list of banks supported by iDin",
                "operationId": "get_app_api_idin_banklist",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "entrance_code": {
                                            "description": "The CM session code on customer portal",
                                            "type": "string"
                                        },
                                        "banks": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "issuer_id": {
                                                        "description": "bank code",
                                                        "type": "string"
                                                    },
                                                    "issuer_name": {
                                                        "description": "bank name",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Returns when something went wrong",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/idin/authenticate": {
            "post": {
                "tags": [
                    "iDin"
                ],
                "summary": "Redirect user to iDin authenticate url",
                "operationId": "post_app_api_idin_authenticate",
                "parameters": [
                    {
                        "name": "body",
                        "in": "query",
                        "description": "",
                        "schema": {
                            "type": "string"
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "entrance_code": {
                                            "description": "the code should be taken from the banks request",
                                            "type": "string"
                                        },
                                        "return_url": {
                                            "description": "the url the client is redirected to after authentication on iDin",
                                            "type": "string"
                                        },
                                        "issuer_id": {
                                            "description": "The id of the bank(issuer) the client want to authenticate to",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response containing the idin authentication url",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "idin_authentication_url": {
                                            "description": "Thie iDin authentication url the user should use of",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Wrong data is provided. code=4003 OR Fail. code=5000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "There is already a generated iDin transaction for provided entrance_code and issuer_id. code=2000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "There isn't such an entrance_code. code=4004",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/idin/intercept": {
            "get": {
                "tags": [
                    "iDin"
                ],
                "summary": "The reason why this endpoint was created is that this integration must be seamless,\ni.e. no changes from frontend side are allowed, but Signicat authorization response provides different\nparameter names compared to cm.com.",
                "description": "So this endpoint will intercept response, translate parameters and redirect to original redirectUrl with valid params",
                "operationId": "get_app_api_idin_returnurlinterceptor",
                "responses": {
                    "301": {
                        "description": "Redirects to redirectUrl logged in the table"
                    }
                }
            }
        },
        "/api/idin/status": {
            "post": {
                "tags": [
                    "iDin"
                ],
                "summary": "Check status of iDin transaction. This endpoint should be called after a successful authentication on iDin site\nwith a consequent call of return url from frontend.",
                "operationId": "post_app_api_idin_checkstatus",
                "parameters": [
                    {
                        "name": "body",
                        "in": "query",
                        "description": "",
                        "schema": {
                            "type": "string"
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "entrance_code": {
                                            "description": "the code should be taken from the banks request",
                                            "type": "string"
                                        },
                                        "transaction_id": {
                                            "description": "the iDin transaction ID",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "idin_authentication_url": {
                                            "description": "Thie iDin authentication url the user should use of",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Wrong data is provided. code=4003 OR Fail. Details in the error_description field. code=5000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden. Details in the error_description field. code=5000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction log could not be found. code=4004",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/idin/id-validation/status": {
            "post": {
                "tags": [
                    "iDin"
                ],
                "summary": "Check status of iDin transaction for Id validation gateway. This endpoint should be called after a successful authentication on iDin site\nwith a consequent call of return url from frontend.",
                "operationId": "post_app_api_idin_checkidvalidationstatus",
                "parameters": [
                    {
                        "name": "body",
                        "in": "query",
                        "description": "",
                        "schema": {
                            "type": "string"
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "entrance_code": {
                                            "description": "the code should be taken from the banks request",
                                            "type": "string"
                                        },
                                        "transaction_id": {
                                            "description": "the iDin transaction ID",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "idin_authentication_url": {
                                            "description": "Thie iDin authentication url the user should use of",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Wrong data is provided. code=4003 OR Fail. Details in the error_description field. code=5000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden. Details in the error_description field. code=5000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction log could not be found. code=4004",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/itsme/banks": {
            "get": {
                "tags": [
                    "Its me"
                ],
                "summary": "A workaround to avoid breaking our frontend",
                "operationId": "get_app_api_itsme_banklist",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "entrance_code": {
                                            "description": "The CM session code on customer portal",
                                            "type": "string"
                                        },
                                        "banks": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "issuer_id": {
                                                        "description": "bank code",
                                                        "type": "string"
                                                    },
                                                    "issuer_name": {
                                                        "description": "bank name",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Returns when something went wrong",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": {
                                        "$ref": {
                                            "type": "string",
                                            "property": "code"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/itsme/authenticate": {
            "post": {
                "tags": [
                    "Its me"
                ],
                "summary": "Redirect user to It's me authenticate url",
                "operationId": "post_app_api_itsme_authenticate",
                "parameters": [
                    {
                        "name": "body",
                        "in": "query",
                        "description": "",
                        "schema": {
                            "type": "string"
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "entrance_code": {
                                            "description": "the code should be taken from the banks request",
                                            "type": "string"
                                        },
                                        "return_url": {
                                            "description": "the url the client is redirected to after authentication on Itsme",
                                            "type": "string"
                                        },
                                        "issuer_id": {
                                            "description": "The id of the bank(issuer) the client want to authenticate",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response containing the Itsme authentication url",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "itsme_authentication_url": {
                                            "description": "The Itsme authentication url the user should use",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": {
                            "schema": "ItsmeController",
                            "properties": {
                                "error": {
                                    "type": "string"
                                },
                                "error_description": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "401": {
                        "$ref": {
                            "schema": "ItsmeController",
                            "properties": {
                                "error": {
                                    "type": "string"
                                },
                                "error_description": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "403": {
                        "$ref": {
                            "schema": "ItsmeController",
                            "properties": {
                                "error": {
                                    "type": "string"
                                },
                                "error_description": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "404": {
                        "$ref": {
                            "schema": "ItsmeController",
                            "properties": {
                                "error": {
                                    "type": "string"
                                },
                                "error_description": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/itsme/intercept": {
            "get": {
                "tags": [
                    "Its me"
                ],
                "summary": "The reason why this endpoint was created is that this integration must be seamless,\ni.e. no changes from frontend side are allowed, but Signicat authorization response provides different\nparameter names compared to cm.com.",
                "description": "So this endpoint will intercept response, translate parameters and redirect to original redirectUrl with valid params",
                "operationId": "get_app_api_itsme_returnurlinterceptor",
                "responses": {
                    "301": {
                        "description": "Redirects to redirectUrl logged in the table"
                    }
                }
            }
        },
        "/api/itsme/finish": {
            "post": {
                "tags": [
                    "Its me"
                ],
                "summary": "Finish verification and fetch client information",
                "operationId": "post_app_api_itsme_finish",
                "parameters": [
                    {
                        "name": "body",
                        "in": "query",
                        "description": "",
                        "schema": {
                            "properties": {
                                "entrance_code": {
                                    "description": "the code should be taken from the banks request",
                                    "type": "string"
                                },
                                "transaction_id": {
                                    "description": "the iDin transaction ID",
                                    "type": "string"
                                }
                            },
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "idin_authentication_url": {
                                            "description": "Thie iDin authentication url the user should use of",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Wrong data is provided. code=4003 OR Fail. Details in the error_description field. code=5000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden. Details in the error_description field. code=5000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction log could not be found. code=4004",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/statistics/sent-emails": {
            "post": {
                "tags": [
                    "Statistics"
                ],
                "summary": "Endpoint for getting sent emails statistics.",
                "operationId": "post_app_api_localstatistics_emailsentstatistics",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From date, example: 2020-05-24",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "To date, example: 2020-05-25",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "sent_emails": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/statistics/successful-logins": {
            "post": {
                "tags": [
                    "Statistics"
                ],
                "summary": "Endpoint for getting number of successful logins per day.",
                "operationId": "post_app_api_localstatistics_successfulloginsstatistics",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From date, example: 2020-05-24",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "To date, example: 2020-05-25",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "unique",
                        "in": "query",
                        "description": "Put ?unique=true if you want to get statistics of unique user logins",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "successful_logins": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/statistics/payments-initiated": {
            "post": {
                "tags": [
                    "Statistics"
                ],
                "summary": "Endpoint for getting number of initiated payments per day.",
                "operationId": "post_app_api_localstatistics_paymentsinitiatedstatistics",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From date, example: 2020-05-24",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "To date, example: 2020-05-25",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "payments_initiated": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/log/": {
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get logs of endpoint calls.",
                "operationId": "get_app_api_log_getlogs",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number. Default value is 1.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of logs per page. Default value is 5.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "invoice_number",
                        "in": "query",
                        "description": "Invoice number. The algorithm will try to match some values from custom_data field.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "From date. Will be compared with created at field. Format: YYYY-MM-DD",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status. Possible values: [success, declined]",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . Success status code will be considered 1000.\n In case of error , status code will be 5000 , for this case request can be repeated , just one time , to avoid infinite loops .",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "count": {
                                            "type": "integer"
                                        },
                                        "logs": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Log"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/order/active": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get list of active orders",
                "operationId": "get_app_api_neworder_getactiveorders",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Select page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "How many orders per request.(per each section)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "should be a simple string",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/order/total-outstanding-amount": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get total outstanding amount for all active orders",
                "operationId": "get_app_api_neworder_gettotaloutstandingamount",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/newsletter/template": {
            "post": {
                "tags": [
                    "Newsletter"
                ],
                "summary": "[admin role] Create newsletter template. The request body is the template to be created.",
                "operationId": "post_app_api_newsletter_createnewslettertemplate",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_email",
                        "in": "query",
                        "description": "From email setted in template",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_name",
                        "in": "query",
                        "description": "From name setted in template",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subject",
                        "in": "query",
                        "description": "Subject of template",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "The code of template. The template language is the mailchimp's template language",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . The HTTP status code is 200.\n The inner status code could be :\n 1000 [ success ] ,\n 4000 [ validation errors ] ,\n 5000 [ add template procedure failed ]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "the code of newly created newsletter template",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Newsletter"
                ],
                "summary": "[admin role] Update newsletter template. The request body contains the fields to be updated.",
                "description": "At least one field should be there.",
                "operationId": "patch_app_api_newsletter_updatenewslettertemplate",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_email",
                        "in": "query",
                        "description": "From email setted in template",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from_name",
                        "in": "query",
                        "description": "From name setted in template",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subject",
                        "in": "query",
                        "description": "Subject of template",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "The code of template. The template language is the mailchimp's template language",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "the name of template to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . The HTTP status code is 200.\n The inner status code could be :\n 1000 [ success ] ,\n 4000 [ validation errors ] ,\n 5000 [ update template procedure failed ]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "the code of updated newsletter template",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/newsletter/template/{templateName}": {
            "get": {
                "tags": [
                    "Newsletter"
                ],
                "summary": "[admin role] Get info about newsletter template by it name.",
                "operationId": "get_app_api_newsletter_getnewslettertemplate",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "templateName",
                        "in": "path",
                        "description": "the name of template the info is required",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . The HTTP status code is 200.\n The inner status code could be :\n 1000 [ success ] ,\n 5000 [ can 't retrieve template info ]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "the newsletter info as an array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/newsletter/template/{templateName}/email/{previewEmail}/preview": {
            "post": {
                "tags": [
                    "Newsletter"
                ],
                "summary": "[admin role] Send a sample of newsletter template to the preview email.",
                "description": "The request body is formed from the template variables.",
                "operationId": "post_app_api_newsletter_sendnewslettertemplatepreview",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "templateName",
                        "in": "path",
                        "description": "The template name the sample of which should be sent to email",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "previewEmail",
                        "in": "path",
                        "description": "The email where the sample should be sent to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . The HTTP status code is 200.\n The inner status code could be :\n 1000 [ success ] ,\n 5000 [ sending template to email failed ]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "sent",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/newsletter/subscription": {
            "post": {
                "tags": [
                    "Newsletter"
                ],
                "summary": "Subscribe an email to the newsletters.",
                "operationId": "post_app_api_newsletter_createsubscriptionemailtorequest",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": null,
                        "description": "The value should be equal to 'AUTHORIZATION_SUBSCRIPTION_HEADER' constant from local environment",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "The email to be subscribed",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . The HTTP status code is 200.\n The inner status code could be :\n 1000 [ success ] ,\n 4000 [ validation errors ] ,\n 4001 [ access denied . wrong authorization header ]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Succesfully subscribed",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Newsletter"
                ],
                "summary": "Unsubscribe an email from newsletters.",
                "operationId": "delete_app_api_newsletter_deletesubscriptionemailtorequest",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": null,
                        "description": "The value should be equal to 'AUTHORIZATION_SUBSCRIPTION_HEADER' constant from local environment",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "The email to be unsubscribed",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . The HTTP status code is 200.\n The inner status code could be :\n 1000 [ successfully deleted ] ,\n 4000 [ validation errors ] ,\n 4001 [ access denied . wrong authorization header ]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "\"Succesfully unsubscribed\" or \"Just unsubscribed\"",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/newsletter/template/{templateName}/send": {
            "post": {
                "tags": [
                    "Newsletter"
                ],
                "summary": "[admin role] Schedule a newsletter to be sent to all subscribers at a date.",
                "description": "Request body is formed from all template variables to be sent with newsletter.",
                "operationId": "post_app_api_newsletter_scheduleemail",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "templateName",
                        "in": "path",
                        "description": "The template to be used for newsletter",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sendat",
                        "in": "query",
                        "description": "The date the newsletter should be sent at. Should be in the format 'yyyy-mm-dd'",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . The HTTP status code is 200.\n The inner status code could be :\n 1000 [ successfully newsletter scheduled ] ,\n 4000 [ validation errors ] ,\n 5000 [ internal error ]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "newsletter scheduled",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/order/all": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get user's unpaid orders (outstanding amount is not extinguished at all).",
                "operationId": "get_app_api_order_getallunpaidorders",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Get orders on page number.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "How many orders per request.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "newest",
                        "in": "query",
                        "description": "Show the newest orders",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "step_number",
                        "in": "query",
                        "description": "Filter by step number",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . Success status code will be considered 1000.\n In case of error , status code will be 5000 , for this case request can be repeated , just one time , to avoid infinite loops .",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "orderNr": {
                                            "type": "integer"
                                        },
                                        "code": {
                                            "type": "integer"
                                        },
                                        "orders": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OrderShortDescriptionResponseModel"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/order/paid": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get list of paid orders",
                "operationId": "get_app_api_order_getpaidorders",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Get orders on page number.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "How many orders per request.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "should be a simple string",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "orderNr": {
                                            "type": "integer"
                                        },
                                        "orders": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OrderShortDescriptionResponseModel"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/order/details/{orderNr}": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "operationId": "get_app_api_order_getorder",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderNr",
                        "in": "path",
                        "description": "Billink order number, in '/order/all' response this field is called 'invoice_number'",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . If order was found , response code will be 1000 ,\n in case no order found with given orderNr , response code will be 4004",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "order": {
                                            "$ref": "#/components/schemas/OrderDetailsResponseModel"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/order/hold/{invoiceNumber}": {
            "post": {
                "tags": [
                    "Orders"
                ],
                "operationId": "post_app_api_order_orderonhold",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoiceNumber",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when all parameters are right . As success status value will be 200.\n                  Also you can get ErrorCode 4000 , in case sent parameters are wrong .",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string"
                                        },
                                        "data.status": {
                                            "type": "string"
                                        },
                                        "data.message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Returns when parameters are not right.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        },
                                        "code": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/order/on-each-step": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Count orders on each step.",
                "operationId": "get_app_api_order_getordersoneachstep",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n               As success status code will be considered 1000 , if email is wrong , status code will be 4003.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/OrdersOnStep"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/order/file-access-token": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "operationId": "get_app_api_order_gettokenforfiledownload",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "In case Access token is right , response will have status code 1000 , otherwise code will be 4001. To have things a bit restructured ,\n I will keep the same response structure [ code , message ] . For code 1000 message will contain access token , for 4004 will be error message",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/order-tabs/list": {
            "get": {
                "tags": [
                    "Order tabs"
                ],
                "summary": "Endpoint for getting list of order tabs.",
                "operationId": "get_app_api_ordertabs_getordertabslist",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tabSorting",
                        "in": "query",
                        "description": "Filter by tab_sorting",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/order-tabs/add": {
            "post": {
                "tags": [
                    "Order tabs"
                ],
                "summary": "Endpoint for creating new order tab.",
                "operationId": "post_app_api_ordertabs_addordertab",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tabSorting",
                        "in": "query",
                        "description": "tab sorting number",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "stepNumber",
                        "in": "query",
                        "description": "step number",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "en",
                        "in": "query",
                        "description": "EN name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nl",
                        "in": "query",
                        "description": "NL name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/order-tabs/update/{id}": {
            "patch": {
                "tags": [
                    "Order tabs"
                ],
                "summary": "Endpoint for updating new order tab.",
                "operationId": "patch_app_api_ordertabs_updateordertab",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tab id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "tabSorting",
                        "in": "query",
                        "description": "tab sorting number",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "stepNumber",
                        "in": "query",
                        "description": "step number",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "en",
                        "in": "query",
                        "description": "EN name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nl",
                        "in": "query",
                        "description": "NL name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/order-tabs/delete/{id}": {
            "delete": {
                "tags": [
                    "Order tabs"
                ],
                "summary": "Endpoint for deleting order tab.",
                "operationId": "delete_app_api_ordertabs_deleteordertab",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tab id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/payment/pay": {
            "post": {
                "tags": [
                    "Payment"
                ],
                "summary": "Endpoint for getting payment redirect url.",
                "operationId": "post_app_api_payment_pay",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "amount",
                        "in": "query",
                        "description": "Amount of moneys to be payed.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bank",
                        "in": "query",
                        "description": "Bank id that was chosen from bank's list.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentMethod",
                        "in": "query",
                        "description": "Id of payment method.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderId",
                        "in": "query",
                        "description": "Billink order id.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Invoice number.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "requestOrigin",
                        "in": "query",
                        "description": "Request origin , where from request is coming , it can be either `web` or `mobile`.\n In case of mobile requestOrigin redirect response url will be `mobile/payment-response`,\n redirect skema will be `billinkStaging` or `billink`, depends on environment .",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n Success code will be 1000 and there will be a redirect link , where client must be redirected .\n In case of wrong sent parameters , response code will be 4000.\n So for users with role `MOBILE_TESTER` redirect url will be to CustomerPortalFrontEnd , where url scheme will be updated\n to that one mobile apps are expecting ( this will be done only for `requestOrigin=mobile`.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "redirectUrl": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/payment/bank/list": {
            "get": {
                "tags": [
                    "Payment"
                ],
                "summary": "Get the list of banks for executing payment.",
                "operationId": "get_app_api_payment_getbankslist",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AvailablePaymentMethodResponseModel"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/payment/response": {
            "post": {
                "tags": [
                    "Payment"
                ],
                "summary": "After payment is finished successfully, a redirect will be done to a specific route,\nin redirect response\nurl will be sent a list of get parameters, that parameters should be sent to customer portal backend.",
                "operationId": "post_app_api_payment_paymentredirectresponse",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderId",
                        "in": "query",
                        "description": "orderId url response parameter.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderStatusId",
                        "in": "query",
                        "description": "orderStatusId url response parameter.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentSessionId",
                        "in": "query",
                        "description": "paymentSessionId url response parameter.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "billinkOrderNumber",
                        "in": "query",
                        "description": "billinkOrderNumber url response parameter.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n                  Success code will be 1000.\n                  In case of wring sent parameters response code will be 4000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/payment/payment-details/{orderNumber}": {
            "post": {
                "tags": [
                    "Payment"
                ],
                "summary": "Endpoint for getting payment redirect url.",
                "operationId": "post_app_api_payment_checkpaymentstatus",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderNumber",
                        "in": "path",
                        "description": "Billink order id.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n Success code will be 1000 and there will be a redirect link , where client must be redirected .\n In case of wrong sent parameters , response code will be 4000.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "any"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/pincode/create": {
            "post": {
                "tags": [
                    "Pincode"
                ],
                "operationId": "post_app_api_pincode_create",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pincode",
                        "in": "query",
                        "description": "pincode user wants to set.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pincode2",
                        "in": "query",
                        "description": "Repeat new pincode.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n                  Success code will be 1000.\n                  In case of wrong sent parameters response code will be 4000"
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/pincode/edit": {
            "patch": {
                "tags": [
                    "Pincode"
                ],
                "operationId": "patch_app_api_pincode_edit",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "oldPincode",
                        "in": "query",
                        "description": "users old pincode",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "newPincode",
                        "in": "query",
                        "description": "users new pincode 1",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "newPincode2",
                        "in": "query",
                        "description": "users new pincode 2",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n                  Success code will be 1000.\n                  In case of wrong sent parameters , or old pincode did not match to pincode from the database ,\n                  or new pincode 1 did not match new pincode 2 , response code will be 4000"
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/pincode/reset": {
            "get": {
                "tags": [
                    "Pincode"
                ],
                "operationId": "get_app_api_pincode_reset",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n                  Success code will be 1000."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/product-return-logs/get": {
            "get": {
                "tags": [
                    "Products return logs",
                    "Product return logs"
                ],
                "summary": "Get product return feature logs.",
                "operationId": "get_app_api_productreturnlog_getcustomerlogs",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order by DESC/ASC. Valid parameters: desc|asc.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sort by columns. Valid parameters: id|invoice|step|status|http_code|createdAt",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number. Default value is 1",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Limit of returned records per page. Default limit is 20",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "invoice",
                        "in": "query",
                        "description": "Find by invoice number",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "step",
                        "in": "query",
                        "description": "Find by step",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Find by status",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "httpCode",
                        "in": "query",
                        "description": "Find by http code",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/push-notification/subscribe": {
            "post": {
                "tags": [
                    "PushNotification"
                ],
                "summary": "Subscribe a user to push notifications by providing token, generated by Firebase Cloud Messaging",
                "operationId": "post_app_api_pushnotification_subscribe",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API (Bearer access token)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Token, generated by Firebase cloud messaging",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\n    1000 - returns on success,\n    2000 - The token %s is already registered,\n    4000 - validation error,\n    4004 - user with email %s is not registered in system; user with email %s is not subscribed to any push notifications,\n    5000 - catched error\n    "
                    },
                    "401": {
                        "description": "Token validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/push-notification/refresh-push-token": {
            "post": {
                "tags": [
                    "PushNotification"
                ],
                "summary": "Refresh existing Push Notification token with a new one",
                "operationId": "post_app_api_pushnotification_refreshpushtoken",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API (Bearer access token)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "oldToken",
                        "in": "query",
                        "description": "old token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Token, generated by Firebase cloud messaging",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\n    1000 - returns on success,\n    2000 - The token %s is already registered,\n    4000 - validation error,\n    4004 - user with email %s is not registered in system; user with email %s is not subscribed to any push notifications,\n    5000 - catched error\n    "
                    },
                    "401": {
                        "description": "Token validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/push-notification/set": {
            "post": {
                "tags": [
                    "PushNotification"
                ],
                "summary": "Enable/disable notification types",
                "operationId": "post_app_api_pushnotification_setpushnotificationtypes",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API (Bearer access token)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enableGeneral",
                        "in": "query",
                        "description": "1 or 0",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enableReminder",
                        "in": "query",
                        "description": "1 or 0",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enableMarketing",
                        "in": "query",
                        "description": "1 or 0",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\n    1000 - returns on success,\n    2000 - The token %s is already registered,\n    4000 - validation error,\n    4004 - user with email %s is not registered in system; user with email %s is not subscribed to any push notifications,\n    5000 - catched error\n    "
                    },
                    "401": {
                        "description": "Token validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/push-notification/send-message-to-one-user": {
            "post": {
                "tags": [
                    "PushNotification"
                ],
                "summary": "This endpoint is used by old billink project to send notifications by different system events.",
                "operationId": "post_app_api_pushnotification_sendmessagetooneuser",
                "parameters": [
                    {
                        "name": "CP_CUSTOM_REQUEST_AUTH_TOKEN",
                        "in": "query",
                        "description": "Ask developer for CP_CUSTOM_REQUEST_AUTH_TOKEN",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "CP_CUSTOM_REQUEST_KEY",
                        "in": "query",
                        "description": "Ask developer for CP_CUSTOM_REQUEST_KEY",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "CP_CUSTOM_REQUEST_VALUE",
                        "in": "query",
                        "description": "Ask developer for CP_CUSTOM_REQUEST_VALUE",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "email of the user to send push notification to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title",
                        "in": "query",
                        "description": "title of push notification message",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message",
                        "in": "query",
                        "description": "push notification message",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Valid types: general, reminder, marketing",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\n    1000 - returns on success,\n    4000 - validation error,\n    4001 - access denied,\n    4004 - user with email %s is not registered in system; user with email %s is not subscribed to any push notifications,\n    5000 - catched error\n    "
                    }
                }
            }
        },
        "/api/push-notification/send-message-to-all": {
            "post": {
                "tags": [
                    "PushNotification"
                ],
                "summary": "Send a message to all registered devices (tokens) at once. This endpoint is intended to be used by old billink system.",
                "operationId": "post_app_api_pushnotification_sendmessagetoalldevices",
                "parameters": [
                    {
                        "name": "CP_CUSTOM_REQUEST_AUTH_TOKEN",
                        "in": "query",
                        "description": "Ask developer for CP_CUSTOM_REQUEST_AUTH_TOKEN",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "CP_CUSTOM_REQUEST_KEY",
                        "in": "query",
                        "description": "Ask developer for CP_CUSTOM_REQUEST_KEY",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "CP_CUSTOM_REQUEST_VALUE",
                        "in": "query",
                        "description": "Ask developer for CP_CUSTOM_REQUEST_VALUE",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title",
                        "in": "query",
                        "description": "title of push notification message",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message",
                        "in": "query",
                        "description": "push notification message",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Valid types: general, reminder, marketing. Default: general",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\n    1000 - returns on success,\n    4000 - validation error,\n    4001 - access denied,\n    4004 - there are no subscribed users yet,\n    5000 - catched error\n    "
                    }
                }
            }
        },
        "/api/push-notification/unsubscribe-by-token": {
            "post": {
                "tags": [
                    "PushNotification"
                ],
                "summary": "Unsubscribe logged in user from push notifications on single device by providing his FCM token (device ID)",
                "operationId": "post_app_api_pushnotification_unsubscribebytoken",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API (Bearer access token)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "description": "token to be unsubscribed",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\n    1000 - returns on success\n    4000 - validation error,\n    4004 - Could not unsubscribe. Token not found,\n    5000 - catched error\n    "
                    },
                    "401": {
                        "description": "Token validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/push-notification/unsubscribe-from-all-devices": {
            "post": {
                "tags": [
                    "PushNotification"
                ],
                "summary": "Unsubscribe logged in user from push notifications on all his devices at once.",
                "operationId": "post_app_api_pushnotification_unsubscribefromalldevices",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API (Bearer access token)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\n    1000 - Returns on success,\n    5000 - catched error\n    "
                    },
                    "401": {
                        "description": "Token validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/raffle/orders": {
            "get": {
                "tags": [
                    "Raffle"
                ],
                "summary": "[user role] Get all orders that can be selected for current month raffle.",
                "description": "Business logic about selection is on billink side.",
                "operationId": "get_app_api_raffle_getordersforraffle",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "Sort orders from this date.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTill",
                        "in": "query",
                        "description": "Sort orders till this date.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderShortDescriptionResponseModel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/raffle/order-select/{orderNumber}": {
            "post": {
                "tags": [
                    "Raffle"
                ],
                "summary": "[user role] Select an order from above list and send it as raffle participating order",
                "operationId": "post_app_api_raffle_selectorderforraffle",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderNumber",
                        "in": "query",
                        "description": "The order number.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderNumber",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n                    As Success code will be 1000 but in case request parameters will be missing or empty ,\n                    response code will be 4000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/raffle/multiple/orders-select": {
            "post": {
                "tags": [
                    "Raffle"
                ],
                "summary": "[user role] Select multiple orders for the raffle.",
                "operationId": "post_app_api_raffle_selectmultipleordersforraffle",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orders",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n                    As Success code will be 1000 but in case request parameters will be missing or empty ,\n                    response code will be 4000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/raffle/winner/{order}": {
            "post": {
                "tags": [
                    "Raffle"
                ],
                "summary": "[admin role] Mark order from raffle orders as winner.",
                "operationId": "post_app_api_raffle_markorderaswinner",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderNumber",
                        "in": "path",
                        "description": "The order number.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "order",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token .\n Success code will be 1000 , if no order exists response code will be 4004.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/raffle/winners/all": {
            "get": {
                "tags": [
                    "Raffle"
                ],
                "summary": "[admin role] Get all orders from raffle order list.",
                "operationId": "get_app_api_raffle_getwinnerlist",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token. As success code will be 1000.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RaffleOrderWinnerResponseModel"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/raffle/email/list": {
            "get": {
                "tags": [
                    "Raffle"
                ],
                "summary": "[user role] Select multiple orders for the raffle.",
                "operationId": "get_app_api_raffle_getemailsfromrafflesignup",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token . As Success code will be 1000.\n In order to keep almost the same response object structure , email list will be placed into `message` field .",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when access token is expired or not valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "error_description": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/template-editor/content/raw": {
            "get": {
                "tags": [
                    "TemplateEditor"
                ],
                "summary": "Get raw template content, even with twig variables.",
                "operationId": "get_app_api_templateeditor_getrawtemplatecontent",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "header",
                        "description": "Billink user id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when Authorization header is set .\n The inner status code could be :\n 1000 [ SUCCESS ] ,\n 4004 [ NOT_EXISTS ] ,\n 4003 [ WRONG_PARAMETERS ]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer",
                                            "example": 1000
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Returns when Authorization header is not send also when no invoice found by provided id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": {
                                        "$ref": "#/components/schemas/AuthenticationErrorResponseModel"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/template-editor/content/save": {
            "patch": {
                "tags": [
                    "TemplateEditor"
                ],
                "summary": "Insert given content into template and save it on server.",
                "operationId": "patch_app_api_templateeditor_savetemplate",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "header",
                        "description": "Billink user id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "content",
                        "in": "query",
                        "description": "Email template content.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when Authorization header is set . The HTTP status code is 200.\n The inner status code could be :\n 1000 [ SUCCESS ] ,\n 4004 [ NOT_EXISTS ] ,\n 4003 [ WRONG_PARAMETERS ]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "type": "integer",
                                            "example": 1000
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Returns when Authorization header is not send also when no invoice found by provided id.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": {
                                        "$ref": "#/components/schemas/AuthenticationErrorResponseModel"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/profile/index": {
            "get": {
                "tags": [
                    "UserProfile"
                ],
                "operationId": "get_app_api_userprofile_index",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization header , as value will be the token from email redirect link, without any token types .",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token and token type is sent.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": {
                                        "$ref": "#/components/schemas/UserResponseModel"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/profile/update": {
            "post": {
                "tags": [
                    "UserProfile"
                ],
                "operationId": "post_app_api_userprofile_update",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization header , as value will be the token from email redirect link ,\n without any token types ,",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "firstLastName",
                        "in": "query",
                        "description": "Username. As success status code will be 1000",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "avatarFileContent",
                        "in": "query",
                        "description": "Image base_64 text content. As success status code will be 1000",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "avatarFileNameReceiver",
                        "in": "query",
                        "description": "Image file name. As success status code will be 1000",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": {
                            "schema": "UserProfileController",
                            "properties": {
                                "access_token": {
                                    "type": "string"
                                },
                                "expires_at": {
                                    "type": "integer"
                                },
                                "token_type": {
                                    "type": "string"
                                },
                                "code": {
                                    "description": "Response status code. For success will be 2000",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/profile/delete": {
            "delete": {
                "tags": [
                    "UserProfile"
                ],
                "summary": "Completely delete a user from the system",
                "operationId": "delete_app_api_userprofile_delete",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email address connected to user, not case sensitive",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns success response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Returns when parameter does not correspond requirements.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/profile/delete-batch": {
            "delete": {
                "tags": [
                    "UserProfile"
                ],
                "summary": "Completely delete a batch of users from the system",
                "operationId": "delete_app_api_userprofile_deletebatch",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization  header, the thing that authenticate the user to REST API",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "emails",
                        "in": "query",
                        "description": "A list of email addresses, separated by comma. Example: test@gmail.com,test2gmail.com",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns success response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Returns when parameter does not correspond requirements.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/profile/pause-orders-settings/{id}": {
            "post": {
                "tags": [
                    "UserProfile"
                ],
                "operationId": "post_app_api_userprofile_setpauseorderssettings",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": null,
                        "description": "Authorization header , as value will be the token from email redirect link ,\n without any token types .",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Target user id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "completedOrdersLimit",
                        "in": "query",
                        "description": "Limit for fully completed(paid) orders",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pausedOrdersLimit",
                        "in": "query",
                        "description": "Limit for paused orders",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "totalPausedOrdersLimit",
                        "in": "query",
                        "description": "Limit for total value of combined paused orders",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "lastPauseDateLimit",
                        "in": "query",
                        "description": "Limit for lastPauseDateLimit in days. Example: 14",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when request has Authorization header with valid token and token type is sent."
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/api/authorization/send-code": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "post_app_api_verificationcode_sendcode",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "description": "email address to check",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "recaptcha",
                        "in": "query",
                        "description": "recaptcha code if origin is web",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when user email exists on billink side. Email will contain a url with 2 GET parameters `email-id` and `origin`. "
                    },
                    "400": {
                        "description": "Returns when email was found on billink side."
                    }
                }
            }
        },
        "/api/authorization/verify-code": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "post_app_api_verificationcode_verifycode",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "description": "email address to check",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "verification_code",
                        "in": "query",
                        "description": "code to verify",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "client_id",
                        "in": "query",
                        "description": "Rest client Id. Ask back-end team for it.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "client_secret",
                        "in": "query",
                        "description": "Rest client Secret. Ask back-end team for it.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success case. when user has orders on billink and doesn't need to do further actions"
                    },
                    "303": {
                        "description": "success case. when user doesn't have any orders in the system and he must to go though id validation flow"
                    },
                    "400": {
                        "description": "fail case"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "BannerResponseModel": {
                "properties": {
                    "image": {
                        "type": "string"
                    },
                    "page_url": {
                        "type": "string"
                    },
                    "web_view": {
                        "type": "boolean"
                    },
                    "web_view_whitelist": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hide_banner": {
                        "type": "boolean"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "updated_at": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TransactionResponseModel": {
                "properties": {
                    "transaction_name": {
                        "type": "string"
                    },
                    "client_id": {
                        "type": "integer"
                    },
                    "price": {
                        "type": "string"
                    },
                    "currency": {
                        "type": "string"
                    },
                    "btw": {
                        "type": "string"
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductResponseModel"
                        }
                    },
                    "qr_uuid": {
                        "type": "string"
                    },
                    "webshop_name": {
                        "type": "string"
                    },
                    "creditcheck_uuid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "FAQResponseModel": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "topic": {
                        "type": "string"
                    },
                    "content": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FAQContentResponseModel"
                        }
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "FAQContentResponseModel": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "content": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "FAQGroupResponseModel": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "FAQSortedResponseModel": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "number": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "entity": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FAQResponseModel"
                        }
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Log": {
                "required": [
                    "id",
                    "createdAt",
                    "request",
                    "status",
                    "response",
                    "customData",
                    "endpoint"
                ],
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "request": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string"
                    },
                    "response": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "customData": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "endpoint": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OrderShortDescriptionResponseModel": {
                "properties": {
                    "days_left": {
                        "type": "integer"
                    },
                    "paid_at": {
                        "type": "string"
                    },
                    "outstanding": {
                        "type": "float"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "invoice_number": {
                        "type": "string"
                    },
                    "webshop": {
                        "type": "string"
                    },
                    "order_date": {
                        "type": "string"
                    },
                    "step": {
                        "type": "integer"
                    },
                    "paid": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "OrderDetailsResponseModel": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "invoice_number": {
                        "type": "string"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerResponseModel"
                    },
                    "order_info": {
                        "$ref": "#/components/schemas/OrderInfoResponseModel"
                    },
                    "client": {
                        "$ref": "#/components/schemas/ClientResponseModel"
                    },
                    "merchant": {
                        "$ref": "#/components/schemas/MerchantResponseModel"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemResponseModel"
                        }
                    },
                    "penalties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "payments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "credits": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "logs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LogsResponseModels"
                        }
                    },
                    "pause": {
                        "$ref": "#/components/schemas/PauseResponseModel"
                    }
                },
                "type": "object"
            },
            "OrdersOnStep": {
                "properties": {
                    "Factuur": {
                        "type": "int"
                    },
                    "Herinnering": {
                        "type": "int"
                    },
                    "CIB": {
                        "type": "int"
                    },
                    "Laatste Sommatie": {
                        "type": "int"
                    },
                    "Aanmaning": {
                        "type": "int"
                    },
                    "No step": {
                        "type": "int"
                    },
                    "Raffle": {
                        "type": "int"
                    }
                },
                "type": "object"
            },
            "AvailablePaymentMethodResponseModel": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "integer"
                    },
                    "visibleName": {
                        "type": "integer"
                    },
                    "countries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "banks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AvailablePaymentBanksResponseModel"
                        }
                    }
                },
                "type": "object"
            },
            "RaffleOrderWinnerResponseModel": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "orderNumber": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "orderAmount": {
                        "type": "string"
                    },
                    "webshop": {
                        "type": "string"
                    },
                    "orderDate": {
                        "type": "string"
                    },
                    "rafflePeriod": {
                        "type": "string"
                    },
                    "isWinner": {
                        "type": "boolean"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/UserResponseModel"
                    }
                },
                "type": "object"
            },
            "AuthenticationErrorResponseModel": {
                "type": "object"
            },
            "UserResponseModel": {
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "billinkId": {
                        "type": "string"
                    },
                    "firstLastName": {
                        "type": "string"
                    },
                    "lastLogin": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "newsSubscribed": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "ProductResponseModel": {
                "properties": {
                    "product_name": {
                        "type": "string"
                    },
                    "price": {
                        "type": "string"
                    },
                    "quantity": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "CustomerResponseModel": {
                "properties": {
                    "customer_info": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "street": {
                        "type": "string"
                    },
                    "house_number": {
                        "type": "string"
                    },
                    "extension": {
                        "type": "string"
                    },
                    "postal_code": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "coc_number": {
                        "type": "string"
                    },
                    "ip": {
                        "type": "string"
                    },
                    "delivery_address": {
                        "type": "string"
                    },
                    "delivery_company": {
                        "type": "string"
                    },
                    "delivery_postal_code": {
                        "type": "string"
                    },
                    "delivery_city": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OrderInfoResponseModel": {
                "properties": {
                    "paid_at": {
                        "type": "string"
                    },
                    "variable1": {
                        "type": "string"
                    },
                    "variable2": {
                        "type": "string"
                    },
                    "order_date": {
                        "type": "string"
                    },
                    "subtotal": {
                        "type": "string"
                    },
                    "payment": {
                        "type": "string"
                    },
                    "credit": {
                        "type": "string"
                    },
                    "vat": {
                        "type": "string"
                    },
                    "outstanding": {
                        "type": "string"
                    },
                    "is_guarantee": {
                        "type": "string"
                    },
                    "holded_till": {
                        "type": "string"
                    },
                    "payment_before": {
                        "type": "string"
                    },
                    "check_provider": {
                        "type": "string"
                    },
                    "latest_invoice_doc": {
                        "$ref": "#/components/schemas/LatestInvoiceDoc"
                    },
                    "is_fraud": {
                        "type": "string"
                    },
                    "is_paid": {
                        "type": "string"
                    },
                    "is_fully_credited": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ClientResponseModel": {
                "properties": {
                    "website": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    },
                    "webshop_logo": {
                        "type": "string"
                    },
                    "webshop": {
                        "type": "string"
                    },
                    "webshop_logo_src": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "MerchantResponseModel": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "contact1": {
                        "type": "string"
                    },
                    "contact2": {
                        "type": "string"
                    },
                    "contact3": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ItemResponseModel": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "total_items": {
                        "type": "string"
                    },
                    "piece_price": {
                        "type": "string"
                    },
                    "total_price": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LogsResponseModels": {
                "properties": {
                    "date": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "file_url": {
                        "type": "string"
                    },
                    "file_id": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PauseResponseModel": {
                "properties": {
                    "is_pause": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AvailablePaymentBanksResponseModel": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "visibleName": {
                        "type": "integer"
                    },
                    "image": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LatestInvoiceDoc": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "email_url": {
                        "type": "string"
                    },
                    "file_url": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        }
    },
    "tags": [
        {
            "name": "Actual Mobile App Version",
            "description": "Actual Mobile App Version"
        },
        {
            "name": "Authorization",
            "description": "Authorization"
        },
        {
            "name": "Banner",
            "description": "Banner"
        },
        {
            "name": "Billink Order",
            "description": "Billink Order"
        },
        {
            "name": "Black IP",
            "description": "Black IP"
        },
        {
            "name": "Customer data",
            "description": "Customer data"
        },
        {
            "name": "Dispute",
            "description": "Dispute"
        },
        {
            "name": "FAQ",
            "description": "FAQ"
        },
        {
            "name": "FAQGroup",
            "description": "FAQGroup"
        },
        {
            "name": "Helpers",
            "description": "Helpers"
        },
        {
            "name": "Id validation",
            "description": "Id validation"
        },
        {
            "name": "Id validation gateway",
            "description": "Id validation gateway"
        },
        {
            "name": "iDin",
            "description": "iDin"
        },
        {
            "name": "Its me",
            "description": "Its me"
        },
        {
            "name": "Statistics",
            "description": "Statistics"
        },
        {
            "name": "Logs",
            "description": "Logs"
        },
        {
            "name": "Orders",
            "description": "Orders"
        },
        {
            "name": "Newsletter",
            "description": "Newsletter"
        },
        {
            "name": "Order tabs",
            "description": "Order tabs"
        },
        {
            "name": "Payment",
            "description": "Payment"
        },
        {
            "name": "Pincode",
            "description": "Pincode"
        },
        {
            "name": "Products return logs",
            "description": "Products return logs"
        },
        {
            "name": "Product return logs",
            "description": "Product return logs"
        },
        {
            "name": "PushNotification",
            "description": "PushNotification"
        },
        {
            "name": "Raffle",
            "description": "Raffle"
        },
        {
            "name": "TemplateEditor",
            "description": "TemplateEditor"
        },
        {
            "name": "UserProfile",
            "description": "UserProfile"
        }
    ]
}